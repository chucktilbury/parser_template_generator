{{file_header}}
#include <stdio.h>
#include <stdlib.h>

#include "common.h"
#include "parser_protos.h"

/*
 * PUBLIC INTERFACE
 */
void push_parser_scope(parser_state_t* pstate, parser_scope_t scope) {

    push_ptr_list(pstate->scope_stack, _COPY_TYPE(&scope, parser_scope_t));
}

parser_scope_t pop_parser_scope(parser_state_t* pstate) {

    parser_scope_t* tpt = pop_ptr_list(pstate->scope_stack);
    parser_scope_t retv = *tpt;
    _FREE(tpt);

    return retv;
}

parser_scope_t peek_parser_scope(parser_state_t* pstate) {

    parser_scope_t* tpt = peek_ptr_list(pstate->scope_stack);
    return *tpt;
}

void push_parser_mode(parser_state_t* pstate, parser_mode_t mode) {

    push_ptr_list(pstate->mode_stack, _COPY_TYPE(&mode, parser_mode_t));
}

parser_mode_t pop_parser_mode(parser_state_t* pstate) {

    parser_mode_t* tpt = pop_ptr_list(pstate->mode_stack);
    parser_mode_t retv = *tpt;
    _FREE(tpt);

    return retv;
}

parser_mode_t peek_parser_mode(parser_state_t* pstate) {

    parser_mode_t* tpt = peek_ptr_list(pstate->mode_stack);
    return *tpt;
}

parser_state_t* create_parser_state(void) {

    parser_state_t* ptr = _ALLOC_TYPE(parser_state_t);
    ptr->scope_stack = create_ptr_list();
    ptr->mode_stack = create_ptr_list();

    return ptr;
}

ast_node_t* parse(void) {

    parser_state_t* pstate = create_parser_state();
    return (ast_node_t*)parse_{{ast_first_node}}(pstate);
}

void recover_parser_error(parser_state_t* pstate) {

    (void)pstate;
}
