{{file_header}}
%{
/*
 * This file is a template.
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

#include "common.h"
#include "tokens.h"

int yycolumn = 1;
int inline_depth = 0;
string_t* strbuf = NULL;

extern int parser_line;
extern char* parser_file;

#define MAX_INCL 16

typedef struct _file_stack_t_ {
    const char* fname;
    FILE* fp;
    int line;
    int col;
    YY_BUFFER_STATE buffer;
    struct _file_stack_t_* next;
} file_stack_t;

file_stack_t* file_stack = NULL;

// const char* strip_quotes(const char* str) {
//     static char buf[64];
//     size_t len = strlen(str) - 2;
//     memset(buf, 0, sizeof(buf));
//     strncpy(buf, &str[1], (len < sizeof(buf))? len: sizeof(buf)-1);
//     return buf;
// }

#define YY_USER_ACTION \
  file_stack->col = yycolumn; \
  if (yylineno == prev_yylineno) yycolumn += yyleng; \
  else { \
    for (yycolumn = 1; yytext[yyleng - yycolumn] != '\n'; ++yycolumn) {} \
    prev_yylineno = yylineno; \
  }

%}

%x INLINE_BLOCK

%option yylineno
%option noinput
%option nounput
%option noyywrap

%%
   // int start_line, start_column;
   int prev_yylineno = yylineno;

{{gen_scanner_rules}}

    /* rules defined in the template. */

"inline"[ \n\r\t]*"{" {
    inline_depth = 0;
    if(strbuf == NULL)
        strbuf = create_string(NULL);
    BEGIN(INLINE_BLOCK);
}

<INLINE_BLOCK>"{" {
    inline_depth++;
    append_string_char(strbuf, '{');
}

<INLINE_BLOCK>[^{}\n] {
    append_string(strbuf, yytext);
}

<INLINE_BLOCK>\n {
    append_string_char(strbuf, '\n');
    file_stack->line++;
}

<INLINE_BLOCK>"}" {
    if(inline_depth > 0) {
        inline_depth--;
        append_string_char(strbuf, '}');
    }
    else {
        add_token_queue(create_token(copy_string(strbuf), TOK_INLINE));
        clear_string(strbuf);
        BEGIN(INITIAL);
        return TOK_INLINE;
    }
}

\"[^\"\n]*\" {
    add_token_queue(create_token(strip_quotes(create_string(yytext)), TOK_STRING_LITERAL));
    return TOK_STRING_LITERAL;
}

\'[^\'\n]*\' {
    add_token_queue(create_token(strip_quotes(create_string(yytext)), TOK_STRING_LITERAL));
    return TOK_STRING_LITERAL;
}

[a-zA-Z_][0-9a-zA-Z_]*  {
    add_token_queue(create_token(create_string(yytext), TOK_IDENTIFIER));
    return TOK_IDENTIFIER;
}

(([1-9][0-9]*)|0)?\.[0-9]*([eE][-+]?[0-9]+)? {
    add_token_queue(create_token(create_string(yytext), TOK_FLOAT_LITERAL));
    return TOK_FLOAT_LITERAL;
}

([1-9][0-9]*)|0 {
    add_token_queue(create_token(create_string(yytext), TOK_INT_LITERAL));
    return TOK_INT_LITERAL;
}

"true"|"false" {
    add_token_queue(create_token(create_string(yytext), TOK_BOOL_LITERAL));
    return TOK_BOOL_LITERAL;
}

#[^\n]*\n  {
    /* comment */
    file_stack->line++;
}

;[^\n]*\n  {
    /* comment */
    file_stack->line++;
}

\n {
    file_stack->line++;
}

[ \t\r]+ { /* ignore spaces */ }

. { return yytext[0]; }

<<EOF>> {
    add_token_queue(create_token(create_string(NULL), TOK_END_OF_FILE));
    yyterminate(); // return NULL
}

%%

void open_scanner_file(const char* fn) {

    const char *fname = find_file(fn);
    yyin = fopen(fname, "r");
    if(yyin == NULL)
        FATAL("cannot open input file: \"%s\": %s\n", fname, strerror(errno));

    file_stack_t* fs = _ALLOC_TYPE(file_stack_t);
    fs->fname = fname;
    fs->next = NULL;
    fs->line = 1;
    fs->col = 1;

    fs->fp = yyin;
    fs->buffer = yy_create_buffer(yyin, YY_BUF_SIZE);
    yy_switch_to_buffer(fs->buffer);

    if(file_stack != NULL) {
        fs->next = file_stack;
        file_stack = fs;
    }
    else {
        file_stack = fs;
        //set_base_file_name(fs->fname);
    }

}

void close_scanner_file(void) {

    file_stack_t* fs = file_stack;
    yy_delete_buffer(fs->buffer);
    file_stack = file_stack->next;

    fclose(fs->fp);
    _FREE(fs->fname);
    _FREE(fs);

    if(file_stack != NULL)
        yy_switch_to_buffer(file_stack->buffer);
}

int get_line_no(void) {

    if(file_stack != NULL)
        return file_stack->line;
    else
        return -1;
}

int get_col_no(void) {

    if(file_stack != NULL)
        return file_stack->col;
    else
        return -1;
}

const char* get_file_name(void) {

    if(file_stack != NULL)
        return file_stack->fname;
    else
        return "no open file"; //get_base_file_name();
}

void init_scanner(void) {

    init_token_queue();
}

token_t* get_scanner_token(void) {

    yylex();
    return NULL;
}
