{{file_header}}

#include "tokens.h"
#include "scanner.h"

// there is one global token queue
typedef struct _token_queue_t_ {
    token_t* head;
    token_t* tail;
    token_t* crnt;
} token_queue_t;

static token_queue_t* token_queue = NULL;
static token_t end_of_input;

token_t* create_token(string_t* str, token_type_t type) {

    token_t* ptr = _ALLOC_TYPE(token_t);
    ptr->str = str;
    ptr->type = type;
    ptr->fname = get_scanner_fname();
    ptr->line_no = get_scanner_line_no();
    ptr->col_no = get_scanner_col_no();

    return ptr;
}

void destroy_token(token_t* tok) {

    if(tok != NULL) {
        destroy_string(tok->str);
        _FREE(tok);
        // note that the fname is allocated by the fileio
    }
}

const char* tok_type_to_str(token_t* tok) {

    return (tok->type == TOK_END_OF_INPUT)? "end of input":
        (tok->type == TOK_ERROR)? "error":
    {{tok_type_to_str}}        "UNKNOWN";
}

void init_token_queue(void) {

    token_queue = _ALLOC_TYPE(token_queue_t);
    add_token_queue(get_scanner_token());

    end_of_input.type = TOK_END_OF_INPUT;
    end_of_input.str = create_string(NULL);
    // everything else is NULL;
}

void destroy_token_queue(void) {

    if(token_queue != NULL) {
        token_t* crnt;
        token_t* next;
        for(crnt = token_queue->head; crnt != NULL; crnt = next) {
            next = crnt->next;
            destroy_token(crnt);
        }
        _FREE(token_queue);
    }
}

void add_token_queue(token_t* tok) {

    if(token_queue->tail != NULL)
        token_queue->tail->next = tok;
    else {
        token_queue->head = tok;
        token_queue->crnt = tok;
    }
    token_queue->tail = tok;
}

void* mark_token_queue(void) {

    if(token_queue != NULL)
        return token_queue->crnt;
    else
        return NULL;
}

void restore_token_queue(void* mark) {

    if(token_queue != NULL)
        token_queue->crnt = (token_t*)mark;
}

void consume_token_queue(void) {

    if(token_queue != NULL) {
        if(token_queue->crnt != NULL && token_queue->crnt != token_queue->head) {
            token_t* next;
            token_t* tok = token_queue->head;
            for(; tok != NULL && tok != token_queue->crnt; tok = next) {
                next = tok->next;
                destroy_token(tok);
            }

            token_queue->head = token_queue->crnt;
        }
    }
}

token_t* get_token(void) {

    if(token_queue != NULL && token_queue->crnt != NULL)
        return token_queue->crnt;
    else
        return &end_of_input;
}

token_t* consume_token(void) {

    if(token_queue != NULL)
        if(token_queue->crnt != NULL)
            token_queue->crnt = token_queue->crnt->next;

    if(token_queue->crnt == NULL) {
        // accomodate a FLEX scanner
        // add_token_queue(get_scanner_token());
        get_scanner_token();
        token_queue->crnt = token_queue->tail;
    }

    return get_token();
}

bool expect_token(token_type_t type) {

    token_t* tok = get_token();
    return (tok->type == type)? true: false;
}

